package guiPack;

import java.awt.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Calendar;
import java.util.Properties;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.swing.DefaultListModel;
import JavaLib.*;
import dataPack.HashGenerator;
import dataPack.SinglePoint;
import dataPack.SingleUser;
import sun.net.smtp.SmtpClient;
import javax.mail.BodyPart;
import javax.mail.Flags;
import javax.mail.Flags.Flag;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;
import mailPack.GenericMailSender;
import mailPack.SingleID;
import mailPack.SingleMail;

public class MailClient extends javax.swing.JFrame {

    MainForm parent;
    DefaultListModel lmIDs;
    
    Timer animateTimer;
    boolean running;
    Vector<String> vecComposeAttacments;
    DefaultListModel lmComposeAttachments;
    DefaultListModel lmInboxRecd;
    Vector<SingleMail> vecInboxRecd;
    
    SingleUser singleUser;
    
    /** Creates new form MainForm */
    public MailClient(MainForm parent, SingleUser singleUser) {
        initComponents();
        this.parent = parent;
        
        // set single user on this form too.
        this.singleUser = singleUser;
        
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);

        vecComposeAttacments = new Vector<String>();
        lmComposeAttachments = new DefaultListModel();

        lmInboxRecd = new DefaultListModel();
        vecInboxRecd = new Vector<SingleMail>();
        refreshInboxRecd();

        lmIDs = new DefaultListModel();
        jLabelSelectedID.setText(singleUser.id.emailID);
        
        refreshComposeAttachments();

        running = false;
        animateTimer = new Timer();
        AnimateTimerTask animateTimerTask = new AnimateTimerTask(this);
        animateTimer.schedule(animateTimerTask, 100, 100);
    }

    public void refreshInboxRecd() {
        lmInboxRecd.clear();
        for (int i = 0; i < vecInboxRecd.size(); i++) {
            lmInboxRecd.addElement(vecInboxRecd.get(i).from + " - " + vecInboxRecd.get(i).subject);
        }
        jListInboxRecd.setModel(lmInboxRecd);
    }

    public void refreshComposeAttachments() {
        lmComposeAttachments.clear();
        for (int i = 0; i < vecComposeAttacments.size(); i++) {
            lmComposeAttachments.addElement(vecComposeAttacments.get(i));
        }
        jListComposeAttach.setModel(lmComposeAttachments);
    }

    public Vector<String> getIDs(String to) {
        Vector<String> ids = new Vector<String>();
        StringTokenizer st = new StringTokenizer(to, ",");
        while (st.hasMoreElements()) {
            ids.add(st.nextToken().trim());
        }
        return ids;
    }

    public void addStatus(String str) {
        jTextStatus.setText(str + "\n" + jTextStatus.getText());
    }

    class SMTPAuthenticator extends javax.mail.Authenticator {

        String id, pass;

        public SMTPAuthenticator(String id, String pass) {
            this.id = id;
            this.pass = pass;
        }

        public PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(id, pass);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextComposeTo = new javax.swing.JTextField();
        jTextComposeSub = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextComposeMsg = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListComposeAttach = new javax.swing.JList();
        jButton18 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jCheckInboxAutoDelete = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListInboxRecd = new javax.swing.JList();
        jCheckInboxOnlyUnread = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextAnonTo = new javax.swing.JTextField();
        jTextAnonSub = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAnonMsg = new javax.swing.JTextArea();
        jButton10 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jProgressBarStatus = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jButton22 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabelSelectedID = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextStatus = new javax.swing.JTextArea();
        jLabel30 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        new LoadForm();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("TO ");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("SUBJECT ");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("MESSAGE ");
        jLabel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ATTACHMENTS");
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextComposeMsg.setColumns(20);
        jTextComposeMsg.setRows(5);
        jScrollPane2.setViewportView(jTextComposeMsg);

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setText(" LOAD");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setText("ADD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setText("S E N D");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jListComposeAttach.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane9.setViewportView(jListComposeAttach);

        jButton18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton18.setText("REMOVE");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel10Layout.createSequentialGroup()
                                .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jTextComposeTo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jButton6))
                            .add(jPanel10Layout.createSequentialGroup()
                                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jTextComposeSub, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))))
                    .add(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton18, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .add(jButton7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel10Layout.createSequentialGroup()
                        .add(89, 89, 89)
                        .add(jButton8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jTextComposeTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jTextComposeSub, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jPanel10Layout.createSequentialGroup()
                                .add(jLabel11)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButton7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton18)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jButton8)
                .addContainerGap())
        );

        jPanel10Layout.linkSize(new java.awt.Component[] {jButton6, jLabel10, jLabel11, jLabel8, jLabel9, jTextComposeSub, jTextComposeTo}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Compose", jPanel3);

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("DOWNLOADED MAILS");
        jLabel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton11.setText("REFRESH");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jCheckInboxAutoDelete.setText("Auto Delete On Download");

        jListInboxRecd.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListInboxRecd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListInboxRecdMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListInboxRecd);

        jCheckInboxOnlyUnread.setText("Only Unread");

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jCheckInboxAutoDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 231, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jCheckInboxOnlyUnread))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckInboxAutoDelete)
                    .add(jCheckInboxOnlyUnread))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Inbox", jPanel6);

        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("TO ");
        jLabel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("SUBJECT ");
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("MESSAGE ");
        jLabel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextAnonMsg.setColumns(20);
        jTextAnonMsg.setRows(5);
        jScrollPane5.setViewportView(jTextAnonMsg);

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton10.setText(" LOAD");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton13.setText("S E N D");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel16Layout = new org.jdesktop.layout.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTextAnonTo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton10))
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTextAnonSub, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(jTextAnonTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(jTextAnonSub, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Anonymous", jPanel13);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1)
                .addContainerGap())
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("C L O S E");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jProgressBarStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jProgressBarStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {jButton2, jProgressBarStatus}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("MAIL CLIENT");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton22.setForeground(new java.awt.Color(51, 0, 153));
        jButton22.setText("BOOKMARKS");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton27.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton27.setForeground(new java.awt.Color(51, 0, 153));
        jButton27.setText("CONTACTS");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton28.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton28.setForeground(new java.awt.Color(51, 0, 153));
        jButton28.setText("GROUPS");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton30.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton30.setForeground(new java.awt.Color(51, 0, 153));
        jButton30.setText("SENT MAILS");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton31.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton31.setForeground(new java.awt.Color(51, 0, 153));
        jButton31.setText("SAVED MAILS");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton32.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton32.setForeground(new java.awt.Color(204, 0, 0));
        jButton32.setText("RESET PASSWORD");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        jButton33.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton33.setForeground(new java.awt.Color(204, 0, 0));
        jButton33.setText("DELETE ACCOUNT");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel21Layout = new org.jdesktop.layout.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton22)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton27)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton28)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton30)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton31)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton33)
                .add(18, 18, 18)
                .add(jButton32)
                .addContainerGap())
        );

        jPanel21Layout.linkSize(new java.awt.Component[] {jButton22, jButton27, jButton28, jButton30, jButton31}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton22)
                    .add(jButton27)
                    .add(jButton28)
                    .add(jButton30)
                    .add(jButton31)
                    .add(jButton32)
                    .add(jButton33))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel21Layout.linkSize(new java.awt.Component[] {jButton22, jButton27, jButton28}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        new LoadForm();

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("REGISTERED ID");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelSelectedID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelSelectedID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSelectedID.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextStatus.setColumns(20);
        jTextStatus.setEditable(false);
        jTextStatus.setRows(5);
        jScrollPane8.setViewportView(jTextStatus);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("STATUS");
        jLabel30.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .add(jLabelSelectedID, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel30, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabelSelectedID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel30)
                .add(18, 18, 18)
                .add(jScrollPane8)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel21, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        animateTimer.cancel();
        parent.writeToFile();
        
        setVisible(false);
        parent.setVisible(true);
        
        // probably close complete project
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        SelectIDDialog selectIDDialog = new SelectIDDialog(this);
        selectIDDialog.setVisible(true);
        if (selectIDDialog.ids.equals("")) {
            return;
        }
        if (!jTextComposeTo.getText().equals("")) {
            jTextComposeTo.setText(jTextComposeTo.getText() + ", ");
        }
        jTextComposeTo.setText(jTextComposeTo.getText() + selectIDDialog.ids);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        FileDialog fd = new FileDialog(this, "Select File", FileDialog.LOAD);
        fd.setVisible(true);
        if (fd.getFile() == null) {
            return;
        }
        vecComposeAttacments.add(fd.getDirectory() + fd.getFile());
        refreshComposeAttachments();

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        Timer timer = new Timer();
        ComposeMailTimerTask composeMailTimerTask = new ComposeMailTimerTask(this);
        timer.schedule(composeMailTimerTask, 100);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        Timer timer = new Timer();
        ReadInboxTimerTask readInboxTimerTask = new ReadInboxTimerTask(this);
        timer.schedule(readInboxTimerTask, 100);

    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        
        SelectIDDialog selectIDDialog = new SelectIDDialog(this);
        selectIDDialog.setVisible(true);
        
        if (selectIDDialog.ids.equals("")) {
            return;
        }
        if (!jTextAnonTo.getText().equals("")) {
            jTextAnonTo.setText(jTextAnonTo.getText() + ", ");
        }
        jTextAnonTo.setText(jTextAnonTo.getText() + selectIDDialog.ids);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        Timer timer = new Timer();
        AnonmyousTimerTask anonmyousTimerTask = new AnonmyousTimerTask(this);
        timer.schedule(anonmyousTimerTask, 100);

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        int indices[] = jListComposeAttach.getSelectedIndices();
        if (indices.length == 0) {
            return;
        }
        for (int i = indices.length - 1; i >= 0; i--) {
            vecComposeAttacments.removeElementAt(indices[i]);
        }
        refreshComposeAttachments();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jListInboxRecdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListInboxRecdMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() != 2) {
            return;
        }
        int index = jListInboxRecd.getSelectedIndex();
        System.out.println("Index: " + index);
        if (index == -1) {
            return;
        }
        new ShowMailContents(this, vecInboxRecd.get(index)).setVisible(true);
        

    }//GEN-LAST:event_jListInboxRecdMouseClicked

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here:
        new ManageBookmarks(this).setVisible(true);
        
        
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here:
        new ManageContacts(this).setVisible(true);
        
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
        new ManageGroups(this).setVisible(true);
        
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
        new SentMails(this).setVisible(true);
        
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
        new RecdMails(this).setVisible(true);
        
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        // TODO add your handling code here:
        
        MessageBox mb = new MessageBox(this, "Are You Sure?");
        mb.setVisible(true);
        if(!mb.ok) {
            return;
        }
        

        Vector <Integer> imgSequence = new Vector<Integer>();
        String textualPassword = "";

        // show dialog and update imgSequence as well as textual password...
        DialogAcceptSequenceTextual dlg = new DialogAcceptSequenceTextual(this);
        dlg.setVisible(true);
        if(dlg.imgSequence.size()==0 || dlg.textualPassword.equals("")) {
            jTextStatus.setText("UNASSIGNED!");
            JOptionPane.showMessageDialog(this, "Either Image Sequence Not Selected Or Textual Password Not Entered!");
            return;
        }
        imgSequence = (Vector <Integer>) dlg.imgSequence.clone(); 
        textualPassword = dlg.textualPassword;

        Vector <SinglePoint> points = new Vector<SinglePoint>();
        for(int i=0;i<imgSequence.size();i++) {
            int imageIndex = imgSequence.get(i);
            
            parent.dlgSelectCCP.reset(System.getProperty("user.dir") + "\\src\\imageDB\\" + imageIndex + ".png", true);
            parent.dlgSelectCCP.setVisible(true);
            
            if(!parent.dlgSelectCCP.ok) {
                return;
            }
            System.out.println("X:" + parent.dlgSelectCCP.points.get(0).x + " " + parent.dlgSelectCCP.points.get(0).y);
            points.add(HashGenerator.calculateSinglePoint(parent.dlgSelectCCP.points.get(0), imageIndex));
        }
        
        singleUser.ccpImageSequence = (Vector <Integer>)(imgSequence.clone());
        singleUser.ccpPoints = (Vector <SinglePoint>)(points);
        singleUser.textualPassword = textualPassword;
        parent.writeToFile();
        
        
        new MessageBox(this, "Password Reset Successfully!").setVisible(true);
        
        
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        // TODO add your handling code here:
        MessageBox mb = new MessageBox(this, "Are You Sure?");
        mb.setVisible(true);
        if(!mb.ok) {
            return;
        }
        
        parent.db.list.remove(singleUser);
        parent.writeToFile();
        setVisible(false);
        parent.setVisible(true);
        
        
        
    }//GEN-LAST:event_jButton33ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckInboxAutoDelete;
    private javax.swing.JCheckBox jCheckInboxOnlyUnread;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelSelectedID;
    private javax.swing.JList jListComposeAttach;
    private javax.swing.JList jListInboxRecd;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    public javax.swing.JProgressBar jProgressBarStatus;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAnonMsg;
    private javax.swing.JTextField jTextAnonSub;
    private javax.swing.JTextField jTextAnonTo;
    private javax.swing.JTextArea jTextComposeMsg;
    private javax.swing.JTextField jTextComposeSub;
    private javax.swing.JTextField jTextComposeTo;
    private javax.swing.JTextArea jTextStatus;
    // End of variables declaration//GEN-END:variables


    class ReadInboxTimerTask extends TimerTask {

        MailClient parent;

        // new logic
        Session s;

        ReadInboxTimerTask(MailClient parent) {
            this.parent = parent;
        }

        public void run() {
            running = true;

            Random r = new Random();

            Session s;
            // new logic
            SingleID sid = singleUser.id;
            System.out.println(sid.emailID + " " + sid.password + " " + sid.incomingHost + " " + sid.incomingProtocol);
            for(int i=0;i<sid.property.size();i++) {
                System.out.println(sid.property.get(i) + " " + sid.propertyValue.get(i));
            }
            
            try {
                Properties props = System.getProperties();
                for(int j=0;j<sid.property.size();j++) {
                    props.put(sid.property.get(j), sid.propertyValue.get(j));
                }
                Authenticator auth = new SMTPAuthenticator(sid.emailID, sid.password);
                s = Session.getInstance(props, auth);
            } catch (Exception e) {
                System.out.println("Exception Creating Session: " + e);
                addStatus("ERROR CREATING SESSION FOR: " + sid.emailID);
                return;
            }
            
            addStatus("Scanning Status For: " + sid.userName);
            String dirNo = "ID_" + sid.userName + Math.abs(r.nextInt());
            try {

                // new logic
                Store store = s.getStore(sid.incomingProtocol);
                store.connect(sid.incomingHost, sid.emailID, sid.password);

                System.out.println(store);
                Folder inbox = store.getFolder("Inbox");
                inbox.open(Folder.READ_WRITE);
                Message messages[] = inbox.getMessages();
                addStatus("Messages In Inbox: " + messages.length);
                for (Message message : messages) {

                    if (jCheckInboxOnlyUnread.isSelected() && message.isSet(Flags.Flag.SEEN)) {
                        continue;
                    }
                    System.out.println("---MESSAGE--- Content Type: " + message.getContentType());
                    SingleMail sm = new SingleMail();
                    if (message.getContent() instanceof String) {
                        sm.from = (message.getFrom())[0].toString();
                        sm.dt = Calendar.getInstance();
                        sm.dt.setTime(message.getSentDate());
                        sm.mailType = 1; // text mail...
                        sm.subject = message.getSubject();
                        sm.to = sid.emailID;
                        sm.contents = message.getContent().toString();

                    } else if (message.getContent() instanceof Multipart) {
                        sm.from = (message.getFrom())[0].toString();
                        sm.dt = Calendar.getInstance();
                        sm.dt.setTime(message.getSentDate());
                        sm.subject = message.getSubject();
                        sm.to = sid.emailID;
                        sm.mailType = 2; // special

                        System.out.println("Content Type: " + message.getContentType());
                        Multipart mp = (Multipart) message.getContent();
                        System.out.println("Count: " + mp.getCount());

                        for (int k = 0; k < mp.getCount(); k++) {
                            Part p = mp.getBodyPart(k);
                            System.out.println("Part Content Type: " + p.getContentType());
                            String type = p.getContentType();
                            String disposition = p.getDisposition();
                            System.out.println("Disposition: " + disposition);

                            if ((disposition != null) && (disposition.equals("ATTACHMENT"))) {
                                sm.attachments.add(p.getFileName());
                                System.out.println("ATTACHMENT: " + p.getFileName());
                                sm.attachmentsSavedAs.add(saveAttachment(p.getInputStream(), p.getFileName(), dirNo));

                            } else {

                                if (p.getContent() instanceof String) {
                                    System.out.println("Instance of Text");
                                    if (p.getContentType().toLowerCase().contains("html")) {
                                        System.out.println("HTML");
                                        sm.htmlContents = p.getContent().toString();
                                    } else if (p.getContentType().toLowerCase().contains("text")) {
                                        System.out.println("Plain Text");
                                        sm.contents = p.getContent().toString();
                                    } else {
                                        System.out.println("Unknown Format");
                                    }
                                } else {
                                    MimeMultipart mm = (MimeMultipart) p.getContent();
                                    System.out.println("MIME: " + mm.getCount());
                                    int cnt2 = mm.getCount();
                                    for (int j = 0; j < cnt2; j++) {
                                        Part p2 = mm.getBodyPart(j);
                                        if (p2.getContentType().toLowerCase().contains("html")) {
                                            System.out.println("Instance of HTML");
                                            sm.htmlContents = p2.getContent().toString();
                                        } else if (p2.getContentType().toLowerCase().contains("text")) {
                                            System.out.println("Plain Text");
                                            sm.htmlContents = p2.getContent().toString();
                                        } else {
                                            System.out.println("Unknown Format: " + p2.getContentType());
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (sm.subject == null) {
                        sm.subject = "NO SUBJECT";
                    }

                    if(notSavedAlready(sm)) {
                        // add to list...
                        vecInboxRecd.add(0, sm);
                        singleUser.savedMails.add(0, sm);
                        refreshInboxRecd();
                    }else {
                        System.out.println("Mail Saved Already!");
                    }

                    if (jCheckInboxAutoDelete.isSelected()) {
                        message.setFlag(Flag.DELETED, true);
                    }
                    System.out.println("---END MSG---");
                }
                addStatus("Done Checking Mails For: " + sid.userName);
                store.close();
            } catch (Exception e) {
                addStatus("Error Scanning Mails For: " + sid.userName);
                System.out.println("Exception: " + e);
                e.printStackTrace();
            }
            
            running = false;
        }
    }

    public boolean notSavedAlready(SingleMail sm) {
        for(SingleMail sm2: singleUser.savedMails) {
            if(sm.from.equalsIgnoreCase(sm2.from) && sm.mailType==sm2.mailType && sm.htmlContents.equalsIgnoreCase(sm2.htmlContents) && sm.contents.equalsIgnoreCase(sm2.contents) && sm.subject.equalsIgnoreCase(sm2.subject)) {
                return false;
            }
        }
        return true;
    }

    public String saveAttachment(InputStream in, String fileName, String dirNo) {
        byte b[] = new byte[4096];
        String dir = System.getProperty("user.dir") + "\\ATTACH\\" + dirNo;
        File f = new File(dir);
        f.mkdir();
        fileName = dir + "\\" + fileName;
        System.out.println("FILENAME: " + fileName);
        try {
            RandomAccessFile outFile = new RandomAccessFile(fileName, "rw");
            while (true) {
                int len = in.read(b);
                if (len <= 0) {
                    break;
                }
                outFile.write(b, 0, len);
            }
            outFile.close();
            addStatus("Attachment Saved To: " + fileName);
        } catch (Exception e) {
            System.out.println("Exception: " + e);
            addStatus("Error Saving Attachment: " + fileName);
            e.printStackTrace();
        }
        return fileName;
    }

    class AnonmyousTimerTask extends TimerTask {

        MailClient parent;

        AnonmyousTimerTask(MailClient parent) {
            this.parent = parent;
        }

        public void run() {
            running = true;
            SingleMail sm = new SingleMail();
            sm.contents = jTextAnonMsg.getText();
            sm.from = "ANONYMOUS";
            sm.to = jTextAnonTo.getText();
            sm.subject = jTextAnonSub.getText();
            sm.mailType = 1; // text mail...
            try {
                // from and to
                SmtpClient sc = new SmtpClient("smtp.net4india.com");
                sc.from("samplemailid@myprojectspace.co.in");
                sc.to(jTextAnonTo.getText());
                PrintStream ps = sc.startMessage();

                // additional headers, subject et al.
                ps.println("From: ANONYMOUS");
                ps.println("To: " + jTextAnonTo.getText());
                ps.println("Subject: " + jTextAnonSub.getText());
                // blank line separates the headers and message
                ps.println();
                ps.println("" + jTextAnonMsg.getText());
                sc.closeServer();
                addStatus("Mail Sent Successfully!");
                singleUser.sentMails.add(sm);
            } catch (IOException e) {
                // Should really put up a dialog box informing user of the error
                addStatus("Error Sending Mail!");
                System.err.println(e);
            }
            running = false;
        }
    }

    class ComposeMailTimerTask extends TimerTask {

        MailClient parent;
        

        ComposeMailTimerTask(MailClient parent) {
            this.parent = parent;
        }

        public void run() {
            running = true;
            addStatus("Sending Mail...");
            
            // new logic
            Session s;
            SingleID sid = singleUser.id;
            try {
                Properties props = System.getProperties();
                for(int j=0;j<sid.property.size();j++) {
                    props.put(sid.property.get(j), sid.propertyValue.get(j));
                }
                Authenticator auth = new SMTPAuthenticator(sid.emailID, sid.password);
                s = Session.getInstance(props, auth);
            } catch (Exception e) {
                System.out.println("Exception Creating Session: " + e);
                addStatus("ERROR CREATING SESSION FOR: " + sid.emailID);
                return;
            }

            Vector<String> ids = getIDs(jTextComposeTo.getText());
            GenericMailSender svg = new GenericMailSender(sid.emailID);

            if (svg.sendMail(s, ids, jTextComposeSub.getText(), jTextComposeMsg.getText(), sid.userName, vecComposeAttacments)) {
                for (int i = 0; i < ids.size(); i++) {
                    SingleMail sm = new SingleMail();
                    sm.attachments = new Vector<String>();
                    for (int j = 0; j < vecComposeAttacments.size(); j++) {
                        sm.attachments.add(vecComposeAttacments.get(j));
                    }
                    sm.contents = jTextComposeMsg.getText();
                    sm.from = sid.userName;
                    sm.subject = jTextComposeSub.getText();
                    sm.to = ids.get(i);
                    
                    singleUser.sentMails.add(sm);
                    
                }
            }

            addStatus("Response: " + svg.reply);
            running = false;
        }
    }

    class AnimateTimerTask extends TimerTask {

        MailClient parent;
        int progress;

        AnimateTimerTask(MailClient parent) {
            this.parent = parent;
            progress = 0;
        }

        public void run() {
            if (!running) {
                progress = 0;
                jProgressBarStatus.setValue(progress);
                return;
            }
            progress++;
            if (progress == 100) {
                progress = 0;
            }
            jProgressBarStatus.setValue(progress);
        }
    }
    
}







